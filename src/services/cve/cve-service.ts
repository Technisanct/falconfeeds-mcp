import type { IApiClient } from "../api-client.js";
import type { CVEResponse, CVEQueryParams } from "../../types/index.js";
import { API_CONFIG } from "../../config/api-endpoints.js";

export interface ICVEService {
  searchCVEs(params: CVEQueryParams): Promise<CVEResponse>;
  getCVEById(cveId: string, resultCount?: number): Promise<CVEResponse>;
  searchCVEsByKeyword(keyword: string, resultCount?: number): Promise<CVEResponse>;
  getCVEsByDateRange(
    publishedSince: number,
    publishedTill: number,
    resultCount?: number
  ): Promise<CVEResponse>;
  getNextPage(nextToken: string, resultCount?: number): Promise<CVEResponse>;
}

export class CVEService implements ICVEService {
  constructor(private readonly apiClient: IApiClient) {}

  async searchCVEs(params: CVEQueryParams): Promise<CVEResponse> {
    return this.apiClient.getCVEs(params);
  }

  async getCVEById(cveId: string, resultCount = API_CONFIG.LIMITS.DEFAULT_RESULT_COUNT): Promise<CVEResponse> {
    return this.apiClient.getCVEs({
      cveID: cveId,
      resultCount
    });
  }

  async searchCVEsByKeyword(
    keyword: string,
    resultCount = API_CONFIG.LIMITS.DEFAULT_RESULT_COUNT
  ): Promise<CVEResponse> {
    return this.apiClient.getCVEs({
      keyword,
      resultCount
    });
  }

  async getCVEsByDateRange(
    publishedSince: number,
    publishedTill: number,
    resultCount = API_CONFIG.LIMITS.DEFAULT_RESULT_COUNT
  ): Promise<CVEResponse> {
    return this.apiClient.getCVEs({
      publishedSince,
      publishedTill,
      resultCount
    });
  }

  async getNextPage(nextToken: string, resultCount = API_CONFIG.LIMITS.DEFAULT_RESULT_COUNT): Promise<CVEResponse> {
    return this.apiClient.getCVEs({
      next: nextToken,
      resultCount
    });
  }
} 